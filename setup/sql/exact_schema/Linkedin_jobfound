create table public."Linkedin_JobFound" (
  "ID" bigint generated by default as identity not null,
  "Title" text null,
  "Job Description" text not null,
  "Link" text null,
  "Job-Type" text null,
  "Rating" text null,
  "Company Name" text null,
  "Benefits" text null,
  "Country" text null,
  "Date" text null,
  constraint Linkedin_JobFound_pkey primary key ("ID")
) TABLESPACE pg_default;


create table public.chat_sessions (
  id text not null default (gen_random_uuid ())::text,
  user_id uuid not null,
  job_id text null,
  session_name text null,
  agent_type text not null default 'job_analysis'::text,
  context jsonb null default '{}'::jsonb,
  is_active boolean null default true,
  summary text null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint chat_sessions_pkey primary key (id),
  constraint chat_sessions_agent_type_check check (
    (
      agent_type = any (
        array[
          'cv_optimization'::text,
          'email_drafting'::text,
          'interview_prep'::text,
          'job_analysis'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_chat_sessions_user_job on public.chat_sessions using btree (user_id, job_id) TABLESPACE pg_default;

create index IF not exists idx_chat_sessions_user_agent on public.chat_sessions using btree (user_id, job_id, agent_type) TABLESPACE pg_default;

create trigger prevent_anonymous_chat_sessions BEFORE INSERT
or
update on chat_sessions for EACH row
execute FUNCTION prevent_anonymous_access ();

create trigger update_chat_sessions_updated_at BEFORE
update on chat_sessions for EACH row
execute FUNCTION update_updated_at_column ();


create table public.cvs (
  id text not null default (gen_random_uuid ())::text,
  user_id uuid not null,
  name text not null,
  filename text null,
  file_url text null,
  mime_type text null,
  file_size integer null,
  extracted_text text null,
  ai_analysis jsonb null,
  skills text[] null,
  experience jsonb null,
  education jsonb null,
  version integer null default 1,
  is_active boolean null default true,
  is_primary boolean null default false,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint cvs_pkey primary key (id)
) TABLESPACE pg_default;

create index IF not exists idx_cvs_user_active on public.cvs using btree (user_id, is_active) TABLESPACE pg_default;

create index IF not exists idx_cvs_user_primary on public.cvs using btree (user_id, is_primary) TABLESPACE pg_default;

create trigger prevent_anonymous_cvs BEFORE INSERT
or
update on cvs for EACH row
execute FUNCTION prevent_anonymous_access ();

create trigger update_cvs_updated_at BEFORE
update on cvs for EACH row
execute FUNCTION update_updated_at_column ();




create table public.jobs (
  id text not null default (gen_random_uuid ())::text,
  user_id uuid not null,
  title text not null,
  company_name text null,
  job_type text null,
  location text null,
  country text null,
  job_link text null,
  salary_range text null,
  benefits text[] null,
  job_description text null,
  requirements text[] null,
  rating integer null,
  status text null default 'active'::text,
  date_posted date null,
  source text null default 'manual'::text,
  linkedin_job_id bigint null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint jobs_pkey primary key (id),
  constraint jobs_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE,
  constraint jobs_rating_check check (
    (
      (rating >= 1)
      and (rating <= 5)
    )
  ),
  constraint jobs_source_check check (
    (
      source = any (
        array[
          'linkedin'::text,
          'manual'::text,
          'imported'::text
        ]
      )
    )
  ),
  constraint jobs_status_check check (
    (
      status = any (
        array[
          'active'::text,
          'applied'::text,
          'interviewing'::text,
          'rejected'::text,
          'offer'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists jobs_user_id_idx on public.jobs using btree (user_id) TABLESPACE pg_default;

create index IF not exists jobs_status_idx on public.jobs using btree (status) TABLESPACE pg_default;

create index IF not exists jobs_created_at_idx on public.jobs using btree (created_at desc) TABLESPACE pg_default;







create table public.messages (
  id text not null default (gen_random_uuid ())::text,
  user_id uuid not null,
  session_id text not null,
  job_id text null,
  role text not null,
  content text not null,
  agent_type text null default 'job_analysis'::text,
  message_type text null default 'text'::text,
  tokens integer null,
  model text null,
  context jsonb null default '{}'::jsonb,
  is_edited boolean null default false,
  parent_id text null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint messages_pkey primary key (id),
  constraint messages_role_check check (
    (
      role = any (
        array['user'::text, 'assistant'::text, 'system'::text]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_messages_session_time on public.messages using btree (session_id, created_at) TABLESPACE pg_default;

create index IF not exists idx_messages_user_session on public.messages using btree (user_id, session_id) TABLESPACE pg_default;

create index IF not exists idx_messages_job_agent on public.messages using btree (job_id, agent_type) TABLESPACE pg_default;

create trigger prevent_anonymous_messages BEFORE INSERT
or
update on messages for EACH row
execute FUNCTION prevent_anonymous_access ();

create trigger update_messages_updated_at BEFORE
update on messages for EACH row
execute FUNCTION update_updated_at_column ();